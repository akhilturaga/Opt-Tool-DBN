#Author: Akhil Turaga
#Last edited: 06/12/2023
#Opt-Tool-DBN to generate accuracy value

import numpy as np
import tensorflow as tf
import csv
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier

#Opening CSV files with gene expression matrix and label data
csv_file_path = r'C:/Users/16785/Downloads/Marker_Genes_Classifiers_data_Condensed.csv'
csv_labels_path = r'C:/Users/16785/Downloads/scRNAseq_Benchmark_datasets/Inter-dataset/PbmcBench/Prior-knowledge-classifiers data/Marker_Genes_Classifiers_Labels_Condensed.csv'
tf.compat.v1.disable_eager_execution()

# Reading CSV files using csv.reader
with open(csv_file_path, 'r') as file:
    csv_reader = csv.reader(file)
    matrix = [row for row in csv_reader]

# Reading CSV files containing labels using csv.reader
with open(csv_labels_path, 'r') as file:
    csv_reader = csv.reader(file)
    labels = [row[0] for row in csv_reader]

#Converting matrix into an array using numpy
array = np.array(matrix[1:])[:, 1:]

#Preprocessing data and convert to floats
array[array == ''] = '0'  #Replacing empty strings with '0'
array = np.nan_to_num(array.astype(float))

#Making sure number of labels matches number of rows in the array
num_rows = array.shape[0]
labels = labels[1:num_rows + 1]  #Excluding first

#Shifting over each row and feeding into the DBN
num_rows, num_columns = array.shape
input_placeholder = tf.compat.v1.placeholder(tf.float32, shape=(None, num_columns))

#DBN structuring
num_hidden_units = [256, 128, 64, 32, 16, 8, 4, 2]  #Number of units in each hidden layer
activation_function = tf.nn.relu  #Activation function for hidden layers

previous_layer = input_placeholder
for i, num_units in enumerate(num_hidden_units):
    #Creating fully connected layer with given number of units and activation function
    layer = tf.keras.layers.Dense(units=num_units, activation=activation_function)(previous_layer)
    previous_layer = layer

#Defining output layer
output_layer = tf.keras.layers.Dense(units=1, activation=tf.nn.sigmoid)(previous_layer)
init = tf.compat.v1.global_variables_initializer()

with tf.compat.v1.Session() as sess:
    #Running initialization
    sess.run(init)
    #Storing outputs in a list
    outputs = []
    #Iterating over each row and feeding into the DBN
    for row_index in range(num_rows):
        #Fetching single row from array
        row = array[row_index, :]
        #Feeding the row into the DBN, getting the output
        row_output = sess.run(output_layer, feed_dict={input_placeholder: row.reshape(1, -1)})
        #Storing the output in the list
        outputs.append(row_output)

#Converting the outputs list to an array
outputs_array = np.concatenate(outputs, axis=0)

#Spliting the outputs and labels into training and testing sets
outputs_train, outputs_test, labels_train, labels_test = train_test_split(
    outputs_array, labels, test_size=0.7, random_state=42)

#Training random forest classifier
classifier = RandomForestClassifier()
classifier.fit(outputs_train, labels_train)

#Predicting labels for the testing set
predicted_labels_test = classifier.predict(outputs_test)

#Calculating the accuracy of the classifier
accuracy = accuracy_score(labels_test, predicted_labels_test)
print("Accuracy:", accuracy)
